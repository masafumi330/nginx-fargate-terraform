name: ECS deploy

on:
  push:
    branches:
      - main
  # pull_request:
  #   branches:
  #     - main
  #   types: [closed]

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  TASK_DEF: "nginx-fargate-terraform-task"
  ECS_SERVICE: "nginx-fargate-terraform-service"
  ECS_CLUSTER: "nginx-fargate-terraform-cluster"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: "arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/role-github-oidc-nginx-fargate-terraform"
          aws-region: "ap-northeast-1"

      # - name: Login to Amazon ECR
      #   uses: aws-actions/amazon-ecr-login@v2
      #   id: login-ecr

      # - name: Build, tag, and push image to Amazon ECR
      #   id: build-image
      #   env:
      #     REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     REPOSITORY: "nginx-fargate-terraform"
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     docker build . --tag ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
      #     docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
      #     echo "image=${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

      # - name: Download task definition
      #   run: |
      #     aws ecs describe-task-definition --task-definition ${{ env.TASK_DEF }} --query taskDefinition > task-definition.json

      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: task-definition.json
      #     container-name: ${{ env.TASK_DEF }}
      #     image: ${{ steps.build-image.outputs.image }}

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: ${{ env.ECS_SERVICE }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     wait-for-service-stability: true
